@page "/one-off/edit/{id?}"

@namespace EtAlii.CryptoMagic.Service

@inherits EditBase<OneOffTrading> 

<Validations @ref="Validations" Mode="ValidationMode.Auto" ValidateOnLoad="false" EditContext="@EditContext" StatusChanged="OnValidationChanged">
<Row>
    <Column ColumnSize="DefaultLayout.ItemColumnWidth">
        <Card Margin="DefaultLayout.Margin">
            <CardHeader>
                <CardTitle>@(Id == null ? "Add new one-off trade" : "Edit one-off trade")</CardTitle>
            </CardHeader>
                <CardBody>
                    <Field>
                        <FieldLabel>Symbol</FieldLabel>
                        <SymbolTextEdit
                            @bind-SelectedValue="@Model.Symbol"
                            Placeholder="Symbol"/>
                        <FieldHelp>The symbol to purchase and later sell.</FieldHelp>
                    </Field>
                    
                    <Validation Validator="@HasQuantity">
                        <Field>
                            <FieldLabel>Quote quantity</FieldLabel>
                                <Addons>
                                    <Addon AddonType="AddonType.Start">
                                        <AddonLabel>@Model.ReferenceSymbol</AddonLabel>
                                    </Addon>
                                    <Addon AddonType="AddonType.Body">
                                        <NumericEdit
                                            ShowStepButtons="false"
                                            Placeholder="Purchase quote quantity"
                                            @bind-Value="@PurchaseQuoteQuantity">
                                        </NumericEdit>
                                    </Addon>
                                </Addons>
                            <FieldHelp>@($"The money (in {Model.ReferenceSymbol}) to use in the purchase.")</FieldHelp>
                        </Field>
                    </Validation>

                    <Validation Validator="@(e => IsBetweenInclusive(e, 0.01m, 1000))">
                        <Field>
                            <FieldLabel>Target percentage increase</FieldLabel>
                            <Addons>
                                <Addon AddonType="AddonType.Start">
                                    <AddonLabel>%</AddonLabel>
                                </Addon>
                                <Addon AddonType="AddonType.Body">
                                    <NumericEdit
                                        ShowStepButtons="false"
                                        TValue="decimal"
                                        Placeholder="Target percentage increase in %" 
                                        @bind-Value="@TargetPercentageIncrease"
                                        Min="0.01m"
                                        Max="1000">
                                    </NumericEdit>
                                </Addon>
                            </Addons>
                            <FieldHelp>The target percentage increase at which should be sold.</FieldHelp>
                        </Field>
                    </Validation>
                    
                    <Validation Validator="@ValidationRule.None">
                        <Field>
                            <FieldLabel>Connectivity</FieldLabel>
                                <RadioGroup TValue="TradeMethod" @bind-CheckedValue="@Model.TradeMethod" Orientation="Orientation.Vertical">
                                    <Radio TValue="TradeMethod" Value="@(TradeMethod.BinanceLive)">Interact with Binance</Radio>
                                    <Radio TValue="TradeMethod" Value="@(TradeMethod.BinanceTest)">Test calls to Binance</Radio>
                                </RadioGroup>
                        </Field>
                    </Validation>
                    
                    <Button Color="Color.Primary" Clicked="@Submit" disabled=@IsInvalid>Save</Button>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Validations>

<Modal @ref="_failureDialogRef" >
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Error starting trade</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Paragraph>The following trade could not be started: @(Model?.Name)?</Paragraph>
            <Paragraph>Error @(_error)</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@FailureConfirmed">Ok</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

