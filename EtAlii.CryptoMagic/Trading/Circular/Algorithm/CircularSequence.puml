@startuml
'stateless namespace EtAlii.CryptoMagic
'stateless class CircularSequenceBase

title Automatic trading mechanism A: Circular.

state CheckWhatCycle <<choice>>

state InitialPurchaseOfB {
    state "SellABuyB" as SellABuyBInInitialCycle
    state "CheckIfSufficientReference" as CheckIfSufficientReferenceInInitialPurchaseOfB
    state "HasSufficientReference" as HasSufficientReferenceInInitialPurchaseOfB <<choice>>
    [*] --> CheckIfSufficientReferenceInInitialPurchaseOfB
    CheckIfSufficientReferenceInInitialPurchaseOfB --> HasSufficientReferenceInInitialPurchaseOfB : Continue
    HasSufficientReferenceInInitialPurchaseOfB --> SellABuyBInInitialCycle : Yes
    HasSufficientReferenceInInitialPurchaseOfB --> [*] : No 
    SellABuyBInInitialCycle --> [*] : Continue
}

state InitialPurchaseOfA {
    state "BuyA" as BuyAInInitialCycle
    state "CheckIfSufficientReference" as CheckIfSufficientReferenceInInitialPurchaseOfA
    state "HasSufficientReference" as HasSufficientReferenceInInitialPurchaseOfA <<choice>>
    [*] --> CheckIfSufficientReferenceInInitialPurchaseOfA
    CheckIfSufficientReferenceInInitialPurchaseOfA --> HasSufficientReferenceInInitialPurchaseOfA : Continue
    HasSufficientReferenceInInitialPurchaseOfA --> BuyAInInitialCycle : Yes      
    HasSufficientReferenceInInitialPurchaseOfA --> [*] : No      
    BuyAInInitialCycle --> [*] : Continue
}


state TransferFromAToB {
    [*] --> GetSituationInTransferFromAToB
    state TransferFromAToBIsWorthIt <<choice>>
    state HasSufficientA <<choice>>
    GetSituationInTransferFromAToB --> TransferFromAToBIsWorthIt : Continue 

    TransferFromAToBIsWorthIt --> CheckIfSufficientA : Yes
    TransferFromAToBIsWorthIt --> [*] : No
    CheckIfSufficientA --> HasSufficientA : Continue
    HasSufficientA --> [*] : No
    HasSufficientA --> SellABuyB : Yes 
    SellABuyB --> [*] : Continue
}
state TransferFromBToA {
    [*] --> GetSituationInTransferFromBToA
    state TransferFromBToAIsWorthIt <<choice>>
    state HasSufficientB <<choice>>
    GetSituationInTransferFromBToA --> TransferFromBToAIsWorthIt : Continue
    TransferFromBToAIsWorthIt --> CheckIfSufficientB : Yes
    TransferFromBToAIsWorthIt --> [*] : No
    CheckIfSufficientB --> HasSufficientB : Continue
    HasSufficientB --> [*] : No
    HasSufficientB --> SellBBuyA : Yes 
    SellBBuyA --> [*] : Continue
}

[*] --> LoadPreviousCycleFromDatabase : Start
LoadPreviousCycleFromDatabase --> CheckWhatCycle : Continue

CheckWhatCycle --> InitialPurchaseOfA : IsInitialCycleToA
CheckWhatCycle --> InitialPurchaseOfB : IsInitialCycleToB
CheckWhatCycle --> TransferFromAToB : IsNormalCycleFromAToB
CheckWhatCycle --> TransferFromBToA : IsNormalCycleFromBToA

InitialPurchaseOfA --> Wait : Continue
InitialPurchaseOfB --> Wait : Continue 
TransferFromAToB --> Wait : Continue
TransferFromBToA --> Wait : Continue 

@enduml